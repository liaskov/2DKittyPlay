const os = require('os')

const platform = os.platform()

const nodeToNativeOsMap = {
  win32: 'win',
  darwin: 'mac',
  linux: 'linux',
}

const unsupportedPlatformStubs = require('./unsupported_platform')

let proxyHelper = ['darwin', 'win32'].includes(platform)
  ? // eslint-disable-next-line import/no-dynamic-require
    require(`../build/Release/proxy-helper_${nodeToNativeOsMap[platform]}`)
  : unsupportedPlatformStubs

if (platform !== 'win32') {
  // Keep proxy auto detection unavailable for macOS for now
  proxyHelper = {
    getProxyAuthentication: proxyHelper.getProxyAuthentication,
    getProxyForUrl: unsupportedPlatformStubs.getProxyForUrl,
  }
}

/**
 * Returns the authentication for the given proxy from the system's credential manager.
 *
 * @param {String} url Proxy URL.
 * @returns {Object} Authentication object with `username` and `password` as properties.
 */
function getProxyAuthentication(url) {
  const auth = proxyHelper.getProxyAuthentication(url)
  if (auth === undefined || auth === '') {
    return undefined
  }

  const [username, password] = auth.split(':')
  return {
    username,
    password,
  }
}

/**
 * Returns the proxy information for the given URL if applicable, including authentication if
 * any is found for the identified proxy URL.
 *
 * @param {String} url Target URL.
 * @returns {Object} Proxy object with the proxy `source` (), `url` ({URL}) and `authentication` (see the output of the `getProxyAuthentication` function)
 */
function getProxyForUrl(url) {
  const proxyInfo = proxyHelper.getProxyForUrl(url)
  if (proxyInfo === undefined || proxyInfo.url === undefined || proxyInfo.url === '') {
    return undefined
  }

  const proxy = {
    url: new URL(proxyInfo.url),
    source: proxyInfo.source,
  }
  if (proxyInfo.authentication !== undefined) {
    proxy.authentication = proxyInfo.authentication
    return proxy
  }

  const authentication = getProxyAuthentication(proxy.url.toString())
  if (authentication !== undefined) {
    proxy.authentication = authentication
  }

  return proxy
}

module.exports = { getProxyAuthentication, getProxyForUrl }
